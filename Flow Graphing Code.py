"""""
Created on Monday, March 18, 2019
@author: Carlos Doebeli

This script takes the files generated by a flowmeter running on a Blaze instrument and overlays the sets of two dips in 
flow for each flow to determine whether a Blaze instrument is performing acceptably well. 

An instrument is underperforming if any of the following conditions occur: 
    - Flow rate dips to more than 3 mL/min lower than the set flow rate AND less than 40% of the set flow rate
    - Flow rate dips for more than 1s
"""""


import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
import os
import re
import sys
import statistics
from Blaze import Blaze

COLORS = (['b', 'g', 'r', 'm', 'c', 'peru'])

files = []
path = sys.path[0]   # Configure this path each time you use the code
fileNames = []
blazes = []
blaze_runs = []
raw_names = []

times = []
flow_rates = []


def openFiles():
    for fileName in os.listdir(path):
        if fileName.endswith(".txt"):
            fileNames.append(fileName)
            filePath = path + "/" + fileName
            f = open(filePath, "r")
            files.append(f)


def closeFiles():
    for f in files:
        f.close()


def plot():

    for run_index in range(0, len(blaze_runs)):
        name = blaze_runs[run_index]
        fig = plt.figure()
        ax = fig.add_subplot(111)

        expected = 0
        median = 0
        resolutions = []
        failures = []
        dip_magnitudes = []
        dip_times = []

        for j in range(0, len(blazes)):
            if blazes[j].get_name() == name and len(blazes[j].get_flow_rates()) >= 3:
                plt.plot(np.array(blazes[j].get_times()), np.array(blazes[j].get_flow_rates()), '.',
                         markersize=0.5, color=COLORS[len(dip_magnitudes) % len(COLORS)])
                plt.axhline(y=blazes[j].get_allowable_dip(), linestyle=':', color='r')

                median += blazes[j].get_median_flow()
                expected += blazes[j].get_expected_flow()
                resolutions.append(blazes[j].sample_resolution)
                dip_magnitudes.append(blazes[j].get_minimum_dip())
                dip_times.append(blazes[j].get_max_dip_time())

                if not blazes[j].pass_dip_magnitude() and "Dip Magnitude" not in failures:
                    failures.append("Dip Magnitude")

                if not blazes[j].pass_max_dip_time() and "Maximum Dip Time" not in failures:
                    failures.append("Max Dip Time")

        if not (1 - Blaze.margin_frac()) * expected < median < (1 + Blaze.margin_frac()) * expected:
            failures.append("Total Median Flow Rate")

        resolution = statistics.median(resolutions)

        plt.subplots_adjust(top=0.85, right=0.7)
        props = dict(facecolor='none', edgecolor='black', pad=4)

        plot_title = name + "\n\n"
        ax.set_title(plot_title, fontsize='large')
        if len(failures) is 0:
            plt.text(0.5, 1.05, "PASS", color='g', transform=ax.transAxes, fontsize='large', fontweight='bold', ha='center')
        else:
            failures = sorted(failures, reverse=True)
            fail_string = "FAIL: "
            for k in range(0, len(failures)):
                fail_string += failures[k]
                if k is not len(failures) - 1:
                    fail_string += ", "
            plt.text(0.5, 1.05, fail_string, color='r', transform=ax.transAxes, fontsize='large', fontweight='bold', ha='center')

        plt.text(1.015, 0.85, "Time resolution = {0:.2f} s\nMedian flow = {1:.2f} mL/s\nFlow percent = {2:.1f}%".format(resolution, median, median/expected*100.0), transform=ax.transAxes, bbox=props, fontsize=11)

        for k in range(0, len(dip_magnitudes)):
            plt.text(1.015, 0.85 - (k + 1) * 0.35, "\nMax dip time = {0:.2f}s\nMagnitude = {1:.2f}mL/s".format(dip_times[k], dip_magnitudes[k]), transform=ax.transAxes, bbox=props, fontsize=11)
            plt.text(1.015, 0.85 - (k + 1) * 0.35, "Run {0}:\n\n".format(k + 1), transform=ax.transAxes, fontsize=11, color=COLORS[k], fontweight='bold')

        plot_name = "Blaze-FAT-Test_" + raw_names[run_index]
        plot_name = plot_name.replace("/", "-")
        ax.set_xlabel('time (s)')
        ax.set_ylabel('flow rate (mL/min)')
        axbottom, axtop = ax.get_ylim()
        ax.set_ylim(min(axbottom, -0.5), max(axtop, 10))

        fileName = sys.path[0] + "/" + plot_name + ".png"     # Configure this path to determine where to save the files
        fig.savefig(fileName)


def read_data():
    times.append([])
    flow_rates.append([])

    for line in files[i]:
        data = line.split(';')
        if len(data) >= 2:
            times[i].append(float(data[0]))
            flow_rates[i].append(float(data[1]))


def get_run(fileNames, index):
    file_name = fileNames[index]
    raw_name = os.path.splitext(os.path.basename(file_name))[0]

    if raw_name.split("_RHS")[0].split("_LHS")[0] not in raw_names:
        raw_names.append(raw_name.split("_RHS")[0].split("_LHS")[0])
    textsplit = raw_name.split("_")

    while len(textsplit) < 4:
        textsplit.append("")

    inst_name = textsplit[0]
    ratios = textsplit[1]
    total_flow_rate = textsplit[2]
    side = textsplit[3]

    tfr = float(re.findall(r'\d+\.?\d+', total_flow_rate)[0])
    lhs, rhs = ratios.split("to")
    lhs = float(lhs)
    rhs = float(rhs)

    if side == "LHS":
        exp_flow = float(tfr * lhs / (lhs + rhs))
    elif side == "RHS":
        exp_flow = float(tfr * rhs / (lhs + rhs))
    else:
        if index % 2 == 0:
            exp_flow = 9
        else:
            exp_flow = 3

    run_name = inst_name + ", " + ratios.replace("to", " to ") + " ratio, expected flow rate " + total_flow_rate.replace("-", "/")

    return run_name, exp_flow


print("Creating graphs...")
openFiles()

for i in range(0, len(files)):
    read_data()

    run, exp_flow = get_run(fileNames, i)

    if run not in blaze_runs:
        blaze_runs.append(run)

    temp_blaze = Blaze(times[i], flow_rates[i], run, expected_flow=exp_flow)
    blazes.append(temp_blaze)

# for blaze in blazes:
#     blaze.pass_print()
plot()
closeFiles()
print("Done!")


